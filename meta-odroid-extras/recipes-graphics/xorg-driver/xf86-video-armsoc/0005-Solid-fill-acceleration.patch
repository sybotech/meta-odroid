From 43d8de52d38d62645ac8a2582bdb9bc460f7f337 Mon Sep 17 00:00:00 2001
From: OtherCrashOverride <OtherCrashOverride@users.noreply.github.com>
Date: Thu, 9 Mar 2017 14:57:10 +0000
Subject: [PATCH 05/12] Solid fill acceleration.

---
 src/armsoc_exa_exynos.c | 101 ++++++++++++++++++++++++++++++++++++++++++++++--
 src/exynos_fimg2d.c     |  11 +++---
 2 files changed, 104 insertions(+), 8 deletions(-)

diff --git a/src/armsoc_exa_exynos.c b/src/armsoc_exa_exynos.c
index 2f5eca4..438d81e 100755
--- a/src/armsoc_exa_exynos.c
+++ b/src/armsoc_exa_exynos.c
@@ -58,14 +58,105 @@ struct ARMSOCNullEXARec {
 	PixmapPtr pSource;
 	int xdir;
 	int ydir;
+	uint32_t fillColor;
 };
 
 static Bool
-PrepareSolidFail(PixmapPtr pPixmap, int alu, Pixel planemask, Pixel fill_colour)
+PrepareSolid(PixmapPtr pPixmap, int alu, Pixel planemask, Pixel fill_color)
 {
-	return FALSE;
+	ScrnInfoPtr pScrn = xf86ScreenToScrn(pPixmap->drawable.pScreen);
+	struct ARMSOCRec* pARMSOC = ARMSOCPTR(pScrn);
+	struct ARMSOCNullEXARec* nullExaRec = (struct ARMSOCNullEXARec*)pARMSOC->pARMSOCEXA;
+	struct ARMSOCPixmapPrivRec* dstPriv = exaGetPixmapDriverPrivate(pPixmap);
+	uint32_t dstBpp;
+
+
+	// If there are no buffer objects, fallback
+	if (!dstPriv->bo)
+	{
+		return FALSE;
+	}
+
+	// If bpp is not 32 or 16, fallback
+	dstBpp = armsoc_bo_bpp(dstPriv->bo);
+
+	if (((dstBpp != 32) && (dstBpp != 16)))
+	{
+		return FALSE;
+	}
+
+	// Save required information for later
+	nullExaRec->fillColor = (uint32_t)fill_color;
+
+	return TRUE;
 }
 
+static void
+Solid(PixmapPtr pPixmap, int x1, int y1, int x2, int y2)
+{
+	ScrnInfoPtr pScrn = xf86ScreenToScrn(pPixmap->drawable.pScreen);
+	struct ARMSOCRec* pARMSOC = ARMSOCPTR(pScrn);
+	struct ARMSOCNullEXARec* nullExaRec = (struct ARMSOCNullEXARec*)pARMSOC->pARMSOCEXA;
+	struct ARMSOCPixmapPrivRec* dstPriv = exaGetPixmapDriverPrivate(pPixmap);
+
+	struct g2d_image dstImage;
+	int ret;
+
+
+	memset(&dstImage, 0, sizeof(dstImage));
+
+
+	// Source
+	switch (armsoc_bo_bpp(dstPriv->bo))
+	{
+	case 32:
+		dstImage.color_mode = G2D_COLOR_FMT_ARGB8888 | G2D_ORDER_AXRGB;
+		break;
+
+	case 16:
+		dstImage.color_mode = G2D_COLOR_FMT_RGB565;
+		break;
+
+	default:
+		// Not supported
+		ERROR_MSG("EXA Solid: dstImage bpp not supported. (%d)", armsoc_bo_bpp(dstPriv->bo));
+		break;
+	}
+
+	//srcImage.color_mode = G2D_COLOR_FMT_ARGB8888 | G2D_ORDER_AXRGB;
+	dstImage.width = armsoc_bo_width(dstPriv->bo);
+	dstImage.height = armsoc_bo_height(dstPriv->bo);
+	dstImage.stride = armsoc_bo_pitch(dstPriv->bo);
+	dstImage.color = nullExaRec->fillColor;
+	
+	dstImage.buf_type = G2D_IMGBUF_GEM;
+	dstImage.bo[0] = armsoc_bo_handle(dstPriv->bo);
+
+
+	ret = g2d_solid_fill(nullExaRec->ctx,
+						 &dstImage,
+					     x1, y1,
+						 x2 - x1, y2 - y1);
+	if (ret < 0)
+	{
+		xf86DrvMsg(-1, X_ERROR, "g2d_solid_fill: x1=%d, y1=%d, x2=%d, y2=%d | (ret=%d)\n",
+			x1, y1, x2, y2, ret);
+	}
+
+	//g2d_exec(nullExaRec->ctx);
+}
+
+static void
+DoneSolid(PixmapPtr pPixmap)
+{
+	ScrnInfoPtr pScrn = xf86ScreenToScrn(pPixmap->drawable.pScreen);
+	struct ARMSOCRec* pARMSOC = ARMSOCPTR(pScrn);
+	struct ARMSOCNullEXARec* nullExaRec = (struct ARMSOCNullEXARec*)pARMSOC->pARMSOCEXA;
+
+	g2d_exec(nullExaRec->ctx);
+}
+
+
 static Bool
 PrepareCopy(PixmapPtr pSrc, PixmapPtr pDst, int xdir, int ydir,
 		int alu, Pixel planemask)
@@ -300,7 +391,7 @@ InitNullEXA(ScreenPtr pScreen, ScrnInfoPtr pScrn, int fd)
 
 	/* Always fallback for software operations */
 	//exa->PrepareCopy = PrepareCopyFail;
-	exa->PrepareSolid = PrepareSolidFail;
+	//exa->PrepareSolid = PrepareSolidFail;
 	exa->CheckComposite = CheckCompositeFail;
 	exa->PrepareComposite = PrepareCompositeFail;
 
@@ -308,6 +399,10 @@ InitNullEXA(ScreenPtr pScreen, ScrnInfoPtr pScrn, int fd)
 	exa->Copy = Copy;
 	exa->DoneCopy = DoneCopy;
 
+	exa->PrepareSolid = PrepareSolid;
+	exa->Solid = Solid;
+	exa->DoneSolid = DoneSolid;
+
 	if (!exaDriverInit(pScreen, exa)) {
 		ERROR_MSG("exaDriverInit failed");
 		goto free_exa;
diff --git a/src/exynos_fimg2d.c b/src/exynos_fimg2d.c
index 53111fa..a078472 100755
--- a/src/exynos_fimg2d.c
+++ b/src/exynos_fimg2d.c
@@ -480,10 +480,10 @@ g2d_solid_fill(struct g2d_context *ctx, struct g2d_image *img,
 	g2d_add_base_addr(ctx, img, g2d_dst);
 	g2d_add_cmd(ctx, DST_STRIDE_REG, img->stride);
 
-	if (x + w > img->width)
-		w = img->width - x;
-	if (y + h > img->height)
-		h = img->height - y;
+	//if (x + w > img->width)
+	//	w = img->width - x;
+	//if (y + h > img->height)
+	//	h = img->height - y;
 
 	pt.data.x = x;
 	pt.data.y = y;
@@ -493,7 +493,8 @@ g2d_solid_fill(struct g2d_context *ctx, struct g2d_image *img,
 	pt.data.y = y + h;
 	g2d_add_cmd(ctx, DST_RIGHT_BOTTOM_REG, pt.val);
 
-	g2d_add_cmd(ctx, SF_COLOR_REG, img->color);
+	//g2d_add_cmd(ctx, SF_COLOR_REG, img->color);
+	g2d_add_cmd(ctx, FG_COLOR_REG, img->color);
 
 	bitblt.val = 0;
 	bitblt.data.fast_solid_color_fill_en = 1;
-- 
2.7.4

